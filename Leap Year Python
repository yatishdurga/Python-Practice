# Leap Year Problem

An extra day is added to the calendar almost every four years as February 29, and the day is called a leap day.  
It corrects the calendar for the fact that our planet takes approximately 365.25 days to orbit the sun. A leap year contains a leap day.
In the **Gregorian calendar**, three conditions are used to identify leap years:
1. The year can be evenly divided by 4, is a leap year, unless:
2. The year can be evenly divided by 100, it is NOT a leap year, unless:
3. The year is also evenly divisible by 400. Then it is a leap year.
This means that in the Gregorian calendar:
- The years 2000 and 2400 are leap years.
- The years 1800, 1900, 2100, 2200, 2300, and 2500 are NOT leap years.
## Task
Given a year, determine whether it is a leap year. If it is a leap year, return `True`; otherwise, return `False`.
Note that the code stub provided reads from `STDIN` and passes arguments to the `is_leap` function. It is only necessary to complete the `is_leap` function.
### Input Format:
- Read a single integer, `year`, to test.
### Constraints:
- The year will be an integer.
### Output Format:
- The function must return a Boolean value (`True`/`False`).
- Output is handled by the provided code stub.
### Sample Input 0:

## Solution
```python
def is_leap(year):
    # If divisible by 400, it's a leap year
    if year % 400 == 0:
        return True
    # If divisible by 100 but not by 400, it's not a leap year
    elif year % 100 == 0:
        return False
    # If divisible by 4 but not by 100, it's a leap year
    elif year % 4 == 0:
        return True
    # Otherwise, it's not a leap year
    else:
        return False

# Read input year
year = int(input())
# Print whether the year is a leap year or not
print(is_leap(year))
